#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef ORIGOMELSDK_SWIFT_H
#define ORIGOMELSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OrigoMelSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// This API is used to track and perform operations on events.
SWIFT_PROTOCOL("_TtP11OrigoMelSDK19MelAnalyticsBaseAPI_")
@protocol MelAnalyticsBaseAPI <NSObject>
/// To track an event.
/// Every call to track eventually results in a data point sent to Mel. These data points are what are
/// measured, counted, and broken down to create your Mel reports. Events have a string name,
/// an optional set of name/value pairs that describe the properties of that event and
/// pre-defined device related properties with each event.
/// \param eventName The name of the event to track.
///
/// \param attributes A Map containing the key value pairs of the properties to include in this event.
///
/// \param throws MelErrorCode is thrown if eventName is empty or invalid attributes.
///
- (BOOL)trackWithEventName:(NSString * _Nonnull)eventName attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error;
/// To track an event.
/// Every call to track eventually results in a data point sent to Mel. These data points are what are
/// measured, counted, and broken down to create your Mel reports. Events have a string name,
/// an optional set of name/value pairs that describe the properties of that event and
/// an boolean value which decides whether to send pre-defined device related properties with each event.
/// \param eventName The name of the event to track.
///
/// \param attributes A Map containing the key value pairs of the properties to include in this event.
///
/// \param includeDeviceProperties If true send predefined device related properties with each event else
/// skip these properties during [track] method call.
///
/// \param throws MelErrorCode is thrown if eventName is empty or invalid attributes.
///
- (BOOL)trackWithEventName:(NSString * _Nonnull)eventName attributes:(NSDictionary<NSString *, id> * _Nullable)attributes includeDeviceProperties:(BOOL)includeDeviceProperties error:(NSError * _Nullable * _Nullable)error;
/// This log timing of an event and once you call track method again with same event name,
/// it will calculate the time difference and logs that time along with other information.
/// \param eventName Name of the event to track with timing.
///
///
/// throws:
/// MelErrorCode is thrown if eventName is empty.
- (BOOL)timeEventWithEventName:(NSString * _Nonnull)eventName error:(NSError * _Nullable * _Nullable)error;
/// Register properties that will be sent with every subsequent call to [track].
/// SuperProperties are a collection of properties that will be sent with every event and
/// persist beyond the lifetime of your application.
/// Setting a superProperty with registerSuperProperties will store a new superProperty,
/// possibly overwriting any existing superProperty with the same name.
/// \param properties A Map containing super properties to register.
///
///
/// throws:
/// MelErrorCode is  thrown if properties contain invalid keys.
- (BOOL)registerSuperPropertiesWithProperties:(NSDictionary<NSString *, id> * _Nonnull)properties error:(NSError * _Nullable * _Nullable)error;
/// Remove a single superProperty, so that it will not be sent with future calls to [track].
/// If there is a superProperty registered with the given name,
/// it will be permanently removed from the existing superProperties.
/// To clear all superProperties, use [MelAnalyticsBaseApi.unregisterAllSuperProperties].
/// \param propertyName Name of the super property to unregister.
///
- (void)unregisterSuperPropertyWithPropertyName:(NSString * _Nonnull)propertyName;
/// Erase all currently registered superProperties.
/// Future tracking calls to sdk will not contain the specific superProperties registered before
/// the clearSuperProperties method was called.
/// To remove a single superProperty, use [MelAnalyticsBaseApi.unregisterSuperProperty].
- (void)unregisterAllSuperProperties;
/// To delete data (events) which is older than specific time period from local storage.
/// This specific time period can be configure using [MelBuilder.setDataStorageTimeLimit].
- (void)deleteExpiredData;
/// Push all events to servers.
/// Events are pushed gradually throughout the lifetime of your application.
/// This means that to ensure that all events are synced,
/// you will need to call syncEvents() to let the SDK know it should sync all remaining events.
- (void)syncEvents;
/// To clear all data from persistent storage.
/// Also remove all the events stored in locally.
- (void)clearAllData;
@end

/// This holds the environments used in OrigoMelSDK
typedef SWIFT_ENUM(NSInteger, MelBuildEnvironments, open) {
/// Production environment
  MelBuildEnvironmentsPROD = 0,
/// Pre-production environment
  MelBuildEnvironmentsPREPROD = 1,
/// Cert environment
  MelBuildEnvironmentsCERT = 2,
/// Testing environment
  MelBuildEnvironmentsTEST = 3,
/// Development environment
  MelBuildEnvironmentsDEV = 4,
};


/// The primary class for integrating OrigoMelSDK with your app
SWIFT_CLASS("_TtC11OrigoMelSDK10MelBuilder")
@interface MelBuilder : NSObject
/// Initializes an instance of the MelBuilder with required properties
/// \param appId App id
///
/// \param apiKey API key
///
/// \param invitationHashCode Invitation hash code
///
///
/// returns:
/// MelBuilder instance
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId apiKey:(NSString * _Nonnull)apiKey invitationHashCode:(NSString * _Nonnull)invitationHashCode OBJC_DESIGNATED_INITIALIZER;
/// Function for setting api key
/// \param key api key
///
- (void)setAPIKeyWithKey:(NSString * _Nonnull)key;
/// Function for setting app id
/// \param code app id
///
- (void)setAppIdWithAppId:(NSString * _Nonnull)appId;
/// Function for setting invitation hash code
/// \param code hash code
///
- (void)setInvitationHashCodeWithCode:(NSString * _Nonnull)code;
/// Function for setting build environment
/// \param buildEnvironment build environment
///
- (void)setBuildEnvironmentWithBuildEnvironment:(enum MelBuildEnvironments)buildEnvironment;
/// Specifies number of retries to same network call in case of api failure.
/// Default value is: 3
/// Minimum value is: 0
/// Maximum value is: 5
/// \param limit Number of times to retry failed network call.
///
- (void)setRetryLimitWithLimit:(NSInteger)limit;
/// Specifies min number of events to queue after which data (events) will be sync to server.
/// Default value is: 20
/// Minimum value is: 1
/// Maximum value is: 50
/// \param limit Minimum number of events in local storage when data will be sync to server.
///
- (void)setBatchLimitWithLimit:(NSInteger)limit;
/// Specifies time in milliseconds to wait before an upload to server if the batch limit is not reached.
/// Default value is: 1 minute
/// Minimum value is: 1 milliseconds
/// Maximum value is: 1 hour
/// \param interval Duration in milliseconds to wait after which data will be automatically sync to server.
///
- (void)setBatchSyncIntervalWithInterval:(double)interval;
/// Specifies max number of events which can be stored in local storage.
/// Default value is: 100
/// Minimum value is: 1
/// Maximum value is: 1000
/// \param limit Max number of events which can be stored in local storage.
///
- (void)setDataStorageLimitWithLimit:(NSInteger)limit;
/// Specifies time period in milliseconds to automatically delete those enqueued events from local storage
/// which are older than this specific time period.
/// Default value is: 2<em>31</em>24<em>60</em>60<em>1000 // 2 months
/// Minimum value is: 1 * 1000 // 1 second
/// Maximum value is: 12</em>31<em>24</em>60<em>60</em>10000 // 12 months
/// \param limit limit
///
- (void)setDataStorageTimeLimitWithLimit:(double)limit;
/// To create instance of MelAnalyticsBaseAPI after successful validation otherwise throw exception.
/// <ul>
///   <li>
///     Returns  Instance of MelAnalyticsBaseAPI
///   </li>
///   <li>
///     throws MelErrorCode if validation is not successful.
///   </li>
/// </ul>
- (id <MelAnalyticsBaseAPI> _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
